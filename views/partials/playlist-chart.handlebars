<div style="width: 950px">
    <canvas id="PlaylistAnalysis" aria-label="Playlist Reflection" role="img">

    </canvas>
    <p style="position:relative; top:20px; font-weight: bold;" align="center">Average Tempo: <span id="tempoDisplay"></span> </p>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
{{!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.3.0/chart.min.js"></script> --}}
{{!-- <script src="/js/playlist-chart.js"></script> --}}

<script>
    const playlistContainer = document.querySelector('#playlist-container');
    const songAttr = document.querySelectorAll('a');

    const tempoArr = [];
    const danceabilityArr = [];
    const valenceArr = [];
    const speechinessArr = [];
    const sentimentArr = [];

    for (let i=1; i < songAttr.length; i++) {
        const tempo = songAttr[i].getAttribute('data-tempo');
        const dance = songAttr[i].getAttribute('data-danceability');
        const valence = songAttr[i].getAttribute('data-valence');
        const speech = songAttr[i].getAttribute('data-speechiness');

        tempoArr.push(tempo);
        danceabilityArr.push(dance);
        valenceArr.push(valence);
        speechinessArr.push(speech);
    };

    const avgTempo = tempoArr.reduce((x, y) => x + y / tempoArr.length, 0)
    const avgDanceability = danceabilityArr.reduce((x, y) => x + y / danceabilityArr.length, 0)
    const avgValence = valenceArr.reduce((x, y) => x + y / valenceArr.length, 0)
    const avgSpeechiness = speechinessArr.reduce((x, y) => x + y / speechinessArr.length, 0)

    const tempoDisplayAvg = document.querySelector('#tempoDisplay');
    tempoDisplayAvg.innerHTML=avgTempo;

    console.log(avgTempo);
    console.log(avgDanceability);
    console.log(avgValence);
    console.log(avgSpeechiness);

    const chart = new Chart(document.getElementById('PlaylistAnalysis'), {
        type: 'bar',
        data: {
            labels: ['danceability', 'valence', 'speechiness'],
            datasets: [
                {
                    xAxisID: 'xAxis1',
                    data: [avgDanceability, avgValence, avgSpeechiness],
                },
            ],
        },
        options: {
            backgroundColor: '#32CD32',
        },
    });
</script>